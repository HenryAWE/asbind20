name: Build

on: [push, pull_request]

jobs:
    MSVC:
      runs-on: windows-2022
      strategy:
          fail-fast: false
          matrix:
            arch: [amd64, x86]
            cxxstd: [20] # MSVC doesn't support C++23 features we want to use yet

      name: Windows ${{matrix.arch}} MSVC C++${{matrix.cxxstd}}

      env:
        VCPKG_BUILD_TYPE: release
        VCPKG_DEFAULT_TRIPLET:  ${{ matrix.arch == 'amd64' && 'x64-windows' || 'x86-windows' }}

      steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.arch}}

      - name: Configure
        run: >
          cmake
          -S ${{github.workspace}}
          -B build
          -G Ninja
          -Dasbind_cxxstd=${{matrix.cxxstd}}
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
          -Dasbind_build_ext=1
          -Dasbind_build_test=1
          -Dasbind_build_bench=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --output-on-failure

      - name: Benchmark
        working-directory: ${{github.workspace}}/build/bench
        # Run all executables start with "bench_", using PowerShell
        shell: pwsh
        run: |
          Get-ChildItem -Path . -Filter "bench_*.exe" -File | ForEach-Object {
            $exe = $_.FullName
            if (Test-Path $exe) {
              Write-Host "Running benchmark: $exe"
              & $exe
            } else {
              Write-Host "Benchmark executable not found: $exe"
            }
          }

    ClangCl:
      runs-on: windows-2025

      name: Windows x64 Clang-Cl

      steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Dependencies
        run: |
            choco upgrade llvm

      - name: Install AngelScript
        working-directory: ${{github.workspace}}
        run: |
          git clone https://github.com/anjo76/angelscript.git
          cd angelscript
          git reset --hard 535fa4e13037c659e726dcfac8791b19da463360 # 2.38.0
          cd sdk/angelscript/projects/cmake
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release -S . -B build
          cmake --build build
          cmake --install build

      - name: Configure
        run: >
          cmake
          -S ${{github.workspace}}
          -B build
          -GNinja
          -Dasbind_cxxstd=20
          -DCMAKE_C_COMPILER=clang-cl
          -DCMAKE_CXX_COMPILER=clang-cl
          -DCMAKE_BUILD_TYPE=Release
          -Dasbind_dev_warning_as_error=OFF
          -Dasbind_build_ext=1
          -Dasbind_build_test=1
          -Dasbind_build_bench=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Release

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: |
          ctest --output-on-failure

      - name: Benchmark
        working-directory: ${{github.workspace}}/build/bench
        # Run all executables start with "bench_", using PowerShell
        shell: pwsh
        run: |
          Get-ChildItem -Path . -Filter "bench_*.exe" -File | ForEach-Object {
            $exe = $_.FullName
            if (Test-Path $exe) {
              Write-Host "Running benchmark: $exe"
              & $exe
            } else {
              Write-Host "Benchmark executable not found: $exe"
            }
          }

    GCC:
      runs-on: ubuntu-24.04
      strategy:
          fail-fast: false
          matrix:
            gcc: [13, 14]
            cxxstd: [20, 23]

      name: Linux x64 GCC ${{matrix.gcc}} C++${{matrix.cxxstd}}

      env:
        VCPKG_BUILD_TYPE: release

      steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build gcc-${{matrix.gcc}} g++-${{matrix.gcc}}

      - name: Install AngelScript
        working-directory: /usr/local/share/vcpkg
        run: ./vcpkg install angelscript

      - name: Configure
        run: >
          cmake
          -S ${{github.workspace}}
          -B build
          -G Ninja
          -Dasbind_cxxstd=${{matrix.cxxstd}}
          -DCMAKE_C_COMPILER=gcc-${{matrix.gcc}}
          -DCMAKE_CXX_COMPILER=g++-${{matrix.gcc}}
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          -Dasbind_build_ext=1
          -Dasbind_build_test=1
          -Dasbind_build_bench=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build

      - name: Install
        working-directory: ${{github.workspace}}/build
        run: sudo cmake --install .

      - name: Test Installation
        run: |
          cmake -GNinja -S test/test_install/ -B build/asbind20_test_install -DCMAKE_CXX_COMPILER=g++-${{matrix.gcc}} -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          cmake --build build/asbind20_test_install
          build/asbind20_test_install/asbind20_test_install

      - name: Test add_subdirectory
        run: |
          cmake -GNinja -S test/test_subdir/ -B build/asbind20_test_subdir -DCMAKE_CXX_COMPILER=g++-${{matrix.gcc}} -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          cmake --build build/asbind20_test_subdir
          build/asbind20_test_subdir/asbind20_test_subdir

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --output-on-failure

      - name: Benchmark
        working-directory: ${{github.workspace}}/build/bench
        # Run all executables start with "bench_"
        run: |
          for exe in bench_*; do
            if [ -x "$exe" ]; then
              echo "Running benchmark: $exe"
              ./$exe
            fi
          done

    Clang:
      runs-on: ubuntu-24.04
      strategy:
          fail-fast: false
          matrix:
            clang: [18, 19]
            cxxstd: [20, 23]

      name: Linux x64 Clang ${{matrix.clang}} C++${{matrix.cxxstd}}

      env:
        VCPKG_BUILD_TYPE: release

      steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build clang-${{matrix.clang}} clang++-${{matrix.clang}}

      - name: Install AngelScript
        working-directory: /usr/local/share/vcpkg
        run: ./vcpkg install angelscript

      - name: Configure
        run: >
          cmake
          -S ${{github.workspace}}
          -B build
          -G Ninja
          -Dasbind_cxxstd=${{matrix.cxxstd}}
          -DCMAKE_C_COMPILER=clang-${{matrix.clang}}
          -DCMAKE_CXX_COMPILER=clang++-${{matrix.clang}}
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          -Dasbind_build_ext=1
          -Dasbind_build_test=1
          -Dasbind_build_bench=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --output-on-failure

      - name: Benchmark
        working-directory: ${{github.workspace}}/build/bench
        # Run all executables start with "bench_"
        run: |
          for exe in bench_*; do
            if [ -x "$exe" ]; then
              echo "Running benchmark: $exe"
              ./$exe
            fi
          done

    ClangARM:
      runs-on: ubuntu-24.04-arm

      name: Linux arm64 Clang 18

      env:
        VCPKG_BUILD_TYPE: release

      steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build clang-18 clang++-18

      - name: Install AngelScript
        working-directory: /tmp
        run: |
          git clone https://github.com/anjo76/angelscript.git
          cd angelscript
          git reset --hard 535fa4e13037c659e726dcfac8791b19da463360 # 2.38.0
          cd sdk/angelscript/projects/cmake
          cmake -GNinja -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 -DCMAKE_BUILD_TYPE=Release -S . -B build -DCMAKE_INSTALL_PREFIX=/tmp/arm
          cmake --build build
          cmake --install build

      - name: Configure
        run: >
          cmake
          -S ${{github.workspace}}
          -B build
          -G Ninja
          -Dasbind_cxxstd=20
          -DCMAKE_C_COMPILER=clang-18
          -DCMAKE_CXX_COMPILER=clang++-18
          -DCMAKE_BUILD_TYPE=Release
          -DAngelscript_DIR=/tmp/arm/lib/cmake/Angelscript
          -Dasbind_build_ext=1
          -Dasbind_build_test=1
          -Dasbind_build_bench=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --output-on-failure

      - name: Benchmark
        working-directory: ${{github.workspace}}/build/bench
        # Run all executables start with "bench_"
        run: |
          for exe in bench_*; do
            if [ -x "$exe" ]; then
              echo "Running benchmark: $exe"
              ./$exe
            fi
          done

    AS_USE_NAMESPACE:
      runs-on: ubuntu-24.04

      name: Clang 18 (AS_USE_NAMESPACE)

      env:
        VCPKG_BUILD_TYPE: release

      steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build clang-18 clang++-18

      - name: Install AngelScript
        working-directory: /usr/local/share/vcpkg
        run: ./vcpkg install angelscript

      - name: Configure
        run: >
          cmake
          -S ${{github.workspace}}
          -B build
          -G Ninja
          -Dasbind_cxxstd=20
          -DCMAKE_CXX_FLAGS=-DAS_USE_NAMESPACE=1
          -DCMAKE_C_COMPILER=clang-18
          -DCMAKE_CXX_COMPILER=clang++-18
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          -Dasbind_build_ext=1
          -Dasbind_build_test=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --output-on-failure

    Emscripten:
      runs-on: ubuntu-24.04
      strategy:
          fail-fast: false
          matrix:
            cxxstd: [20, 23]

      name: Emscripten C++${{matrix.cxxstd}}

      steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14

      - name: Install AngelScript
        working-directory: /tmp
        run: |
          git clone https://github.com/anjo76/angelscript.git
          cd angelscript
          git reset --hard 535fa4e13037c659e726dcfac8791b19da463360 # 2.38.0
          cd sdk/angelscript/projects/cmake
          emcmake cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-fexceptions -S . -B build
          cmake --build build
          cmake --install build

      - name: Configure
        run: >
          emcmake cmake
          -S ${{github.workspace}}
          -B build
          -G Ninja
          -Dasbind_cxxstd=${{matrix.cxxstd}}
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-fexceptions
          -Dasbind_build_ext=1
          -Dasbind_build_test=1
          -Dasbind_build_bench=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --output-on-failure

      - name: Benchmark
        working-directory: ${{github.workspace}}/build/bench
        # List all files start with "bench_" and end with ".js"
        run: |
          for file in bench_*.js; do
            if [ -f "$file" ]; then
              echo "Running benchmark: $file"
              node "$file"
            fi
          done

    ASan:
      runs-on: ubuntu-24.04

      name: Clang 18 (ASan)

      env:
        VCPKG_BUILD_TYPE: release

      steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build clang-18 clang++-18 llvm-18

      - name: Install AngelScript
        working-directory: /tmp
        run: |
          git clone https://github.com/anjo76/angelscript.git
          cd angelscript
          git reset --hard 535fa4e13037c659e726dcfac8791b19da463360 # 2.38.0
          cd sdk/angelscript/projects/cmake
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer" -S . -B build -DCMAKE_INSTALL_PREFIX=/tmp/asan
          cmake --build build
          cmake --install build

      - name: Configure
        run: >
          cmake
          -S ${{github.workspace}}
          -B build
          -G Ninja
          -Dasbind_cxxstd=20
          -DCMAKE_C_COMPILER=clang-18
          -DCMAKE_CXX_COMPILER=clang++-18
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer"
          -DAngelscript_DIR=/tmp/asan/lib/cmake/Angelscript
          -Dasbind_build_ext=1
          -Dasbind_build_test=1

      - name: Build
        run: cmake --build ${{github.workspace}}/build

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: |
          export ASAN_SYMBOLIZER_PATH='/usr/bin/llvm-symbolizer-18'
          export ASAN_OPTIONS=detect_leaks=1
          ctest --output-on-failure
